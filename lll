/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "adc.h"
#include "dma.h"
#include "tim.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "OLED.h"
#include <stdio.h>
#include <string.h>
#include "arm_math.h" 
#include "usart.h"
#include "arm_const_structs.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */



#define ADC_BUF_SIZE 1024  // FFT 输入大小（必须是 2 的幂）
#define SAMPLING_RATE 26667  // 实际采样率，单位 Hz
#define FFT_SIZE 1024
#define SAMPLE_RATE 26667
#define k 3.846
#define M_PI 3.1415926
#define kADC 1292.77
#define HARMONIC_THRESHOLD 0.1
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
int j=0;
uint16_t max = 0, min = 0;
uint16_t adc_buf1[ADC_BUF_SIZE];  // ADC DMA 缓冲区
uint16_t adc_buf2[ADC_BUF_SIZE];

float input11_f32[ADC_BUF_SIZE];   // FFT 输入缓冲区
float input12_f32[ADC_BUF_SIZE*2]; 
float output1_f32[ADC_BUF_SIZE];  // FFT 计算结果
float input21_f32[ADC_BUF_SIZE];  
float input22_f32[ADC_BUF_SIZE*2]; 
float output2_f32[ADC_BUF_SIZE]; 

float magnitude1[FFT_SIZE / 2];//// 幅度数组
float magnitude2[FFT_SIZE / 2];

float window[FFT_SIZE];

int max_index = 0;

float main_frequency1, main_frequency2;
float amplitude_peak1, amplitude_peak2;
float amplitude_ratio, phase_diff;
float thd;

char* wave1 = NULL;
char* wave2 = NULL;

int STATE=0;
float magnitude1[FFT_SIZE / 2];//// 幅度数组
float magnitude2[FFT_SIZE / 2];

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
//全局变量

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void generate_hanning_window(void) {
    for (int i = 0; i < FFT_SIZE; i++) {
        window[i] = 0.5f - 0.5f * cosf(2 * PI * i / (FFT_SIZE - 1));
    }
}

void trans1(void) {
    for (int i = 0; i < FFT_SIZE; i++) {
        input11_f32[i] = (float)(adc_buf1[i]);
    }
}

void trans2(void) {
    for (int i = 0; i < FFT_SIZE; i++) {
        input21_f32[i] = (float)(adc_buf2[i]);
    }
}

// signal 为原始实数输入（如 ADC 转 float 的结果）
// fft_input_complex 为目标数组大小必须是 FFT_SIZE * 2（实虚交错）
void prepare_fft_input(float* fft_input_complex, float* signal, float* window) {
    for (int i = 0; i < FFT_SIZE; i++) {
        float sample = signal[i] * window[i];  // 应用窗函数
        fft_input_complex[2 * i]     = sample; // 实部
        fft_input_complex[2 * i + 1] = 0.0f;    // 虚部清零
    }
}

float find_main_frequency(float* fft_output, int* index) {
    float max_magnitude = 0.0f;
    int max_idx = 0;

    for (int i = 1; i < FFT_SIZE ; i++) {
        float real = fft_output[2 * i];
        float imag = fft_output[2 * i + 1];
        float magnitude = real * real + imag * imag;

        if (magnitude > max_magnitude) {
            max_magnitude = magnitude;
            max_idx = i;
        }
    }

    if (index != NULL) *index = max_idx;
    return ((float)max_idx * SAMPLE_RATE) / FFT_SIZE;
}

float calculate_vpp(uint16_t* adc_buf) {
    max = 0, min = 0xFFFF;
    for (int i = 0; i < FFT_SIZE; i++) {
        if (adc_buf[i] > max) max = adc_buf[i];
        if (adc_buf[i] < min) min = adc_buf[i];
    }
    return (float)(max - min) / kADC;  // kADC 是 ADC 量化因子，转电压
}




const char* detect_waveform(float32_t* magnitude,int index) {
    // 选择基波
    
    float32_t base_amplitude = magnitude[index];  // 基波的幅度
    uint32_t harmonic_count = 0;                       // 谐波计数

    // 判断谐波和基波幅度的比例，计算超出阈值的谐波数量
    for (uint32_t i = 2; i < FFT_SIZE / 2 && harmonic_count < HARMONIC_THRESHOLD; i++) {
        // 只考虑与基波频率的整数倍接近的谐波，简化处理
        if (magnitude[i] > base_amplitude * HARMONIC_THRESHOLD) {
            harmonic_count++;
        }
    }

    // 根据谐波数目判断波形类型
    if (harmonic_count == 0) {
        return "Sine";  // 如果没有显著的谐波，认为是正弦波
    } else if (harmonic_count == 1) {
        return "Triangle";  // 如果只有一个显著谐波，认为是三角波
    } else if (harmonic_count > 1) {
        return "Square";    // 如果有多个显著谐波，认为是方波
    }

    return "Unknown";  // 如果无法判断，返回未知
}



	


void calculate_magnitude1() {// 计算幅度
    for (int i = 0; i < FFT_SIZE / 2; i++) {
        float real = output1_f32[2 * i];       // 实部
        float imag = output1_f32[2 * i + 1];   // 虚部
        magnitude1[i] = sqrtf(real * real + imag * imag);  // 计算幅度
    }
}
void calculate_magnitude2() {// 计算幅度
    for (int i = 0; i < FFT_SIZE / 2; i++) {
        float real = output2_f32[2 * i];       // 实部
        float imag = output2_f32[2 * i + 1];   // 虚部
        magnitude2[i] = sqrtf(real * real + imag * imag);  // 计算幅度
    }
}

float calculate_thd(float* magnitude, int fundamental_index) {
    float thd_sum = 0.0f;
    float fundamental = magnitude[fundamental_index];

    for (int i = 2; i <= 7; i++) {
        int idx = fundamental_index * i;
        if (idx < FFT_SIZE / 2) {
            thd_sum += magnitude[idx] * magnitude[idx];
        }
    }

    return sqrtf(thd_sum) / fundamental * 100.0f; // 百分比
}

void process_signal1(void) {
    // 执行 FFT
    arm_cfft_f32(&arm_cfft_sR_f32_len1024, input12_f32, 0, 1);  

    // 计算幅度谱
    arm_cmplx_mag_f32(input12_f32, magnitude1, FFT_SIZE / 2);

    // 主频分析：通过计算幅度谱的最大值索引，来得到主频
    main_frequency1 = find_main_frequency(input12_f32, &max_index);

    // Vpp 计算与波形识别
    amplitude_peak1 = calculate_vpp(adc_buf1) ;
    wave1 = (char*)detect_waveform(magnitude1, max_index);
}

void process_signal2(void) {
    // 执行 FFT
    arm_cfft_f32(&arm_cfft_sR_f32_len1024, input22_f32, 0, 1);

    // 计算幅度谱
    arm_cmplx_mag_f32(input22_f32, magnitude2, FFT_SIZE / 2);

    // 主频分析：通过计算幅度谱的最大值索引，来得到主频
    main_frequency2 = find_main_frequency(input22_f32, &max_index);

    // Vpp 计算
    amplitude_peak2 = calculate_vpp(adc_buf2);

    // THD 计算
    thd = calculate_thd(magnitude2, max_index);

    // 波形识别
    wave2 = (char*)detect_waveform(magnitude2, max_index);
}



float calculate_amplitude_ratio(float* mag1, float* mag2, int index) {
    float amp1 = mag1[index];
    float amp2 = mag2[index];
    return amp1 / amp2;
}

float calculate_phase_diff(float* fft_output1, float* fft_output2, int index) {
    float real1 = fft_output1[2 * index];
    float imag1 = fft_output1[2 * index + 1];
    float real2 = fft_output2[2 * index];
    float imag2 = fft_output2[2 * index + 1];

    float phase1 = atan2f(imag1, real1);
    float phase2 = atan2f(imag2, real2);

    float diff = phase1 - phase2;

    if (diff > PI) diff -= 2 * PI;
    if (diff < -PI) diff += 2 * PI;

    return diff * (180.0f / PI); // 转换为角度
}



void analyze_signals(void) {
    trans1();
    trans2();

	//调试代码
    for(int i=0;i<FFT_SIZE;i++){
	  printf("%f,%f\n",input11_f32[i],input21_f32[i]);
	  
		}
    prepare_fft_input(input12_f32,input11_f32,window);
		prepare_fft_input(input22_f32,input21_f32,window);

    process_signal1();
    process_signal2();

    phase_diff = calculate_phase_diff(output1_f32, output2_f32, max_index);
    amplitude_ratio = calculate_amplitude_ratio(magnitude1, magnitude2, max_index);

}


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){ //回调函数
	j++;
	 analyze_signals();  // 核心分析
	
}





/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */
   
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_ADC1_Init();
  MX_TIM2_Init();
  MX_USART1_UART_Init();
  MX_ADC2_Init();
  /* USER CODE BEGIN 2 */
	
	HAL_ADC_Start_DMA(&hadc2,(uint32_t*)adc_buf2,1024);
	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)adc_buf1,1024);
	HAL_TIM_Base_Start(&htim2);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	//假装这里有一些很复杂的代码
	}
	
	
		

//		printf("hello");
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */


/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 168;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
